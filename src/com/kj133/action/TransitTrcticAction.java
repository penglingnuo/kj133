/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.kj133.action;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;

import com.kj133.entity.Passforbided;
import com.kj133.entity.Search_TransitTrctic;
import com.kj133.entity.bo.PassforbidedBO;
import com.kj133.entity.vo.OperationNumberVO;
import com.kj133.entity.vo.SuggestEmployeeVO;
import com.kj133.util.Global;

/** 
 * MyEclipse Struts
 * Creation date: 02-28-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class TransitTrcticAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private final Logger  log=Logger.getLogger(this.getClass());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward  
	 */
	public ActionForward init(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		    PassforbidedBO  bo=new PassforbidedBO();
		    try{
		        List list=bo.getCaption();
		        request.setAttribute("captionList", list);
		    }catch(Exception e){
		    	log.error("==通行策略设置==",e);
		    }
		    return mapping.findForward("init");
	}
	
	/**
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return   根据标题得到详细信息
	 */
	public ActionForward showInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		    PassforbidedBO  bo=new PassforbidedBO();
		    try{
		    	
		           String number=request.getParameter("number");
		           List list=bo.getInfo(number);
		           request.setAttribute("infoList", list);
		    }catch(Exception e){
		    	log.error("==通行策略设置==",e);
		    }
		    return  mapping.findForward("info");
	}
	/**
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return   根据标题得到详细信息
	 */
	public ActionForward showInfo1(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Global  bal=new Global();
		DynaActionForm dy=(DynaActionForm) form;
		PassforbidedBO  bo=new PassforbidedBO();
		try{
			Search_TransitTrctic init=( Search_TransitTrctic)dy.get("ser_transitTrctic");
			//  当点新增的时候，把原来选中的全部取消
			init.setCardreaderx(new String[0]);
			init.setLocatorx(new String[0]);
			init.setStafferx(new String[0]);
			init.setCaption("");
			init.setStime("");
			init.setEtime("");
			init.setPass("1");
			init.setPassmode("0");
			
			Calendar cal=Calendar.getInstance();//获取当前时间
			SimpleDateFormat format =new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String time=format.format(cal.getTime());
			
			
			List cList=bal.GetCardreader();
			List slist=bal.GetStaffer1();
//		        List lList=bal.GetLocator();
//		        List slist=bal.GetStaffer();
			request.setAttribute("Clist", cList);
//		        request.setAttribute("Llist", lList);
			request.setAttribute("Slist", slist);
			
			
			init.setStime(time);
			init.setEtime(time);
			init.setPass("1");
			init.setPassmode("0");
			
			//---------------------------------
			String number=request.getParameter("number");
			String caption=request.getParameter("caption");
			List list=bo.getInfo(number);
			String[] s = new String[19385];
			String[] ss = new String[list.size()];
			int a = 0;
			for (int i = 0; i < list.size(); i++) {
				OperationNumberVO vo = (OperationNumberVO)list.get(i);
				if(vo.getCardid().equals("所有卡")){
					for(int j = 0; j < slist.size(); j++){
						
						SuggestEmployeeVO v = (SuggestEmployeeVO)slist.get(j);
						
						s[j] = String.valueOf(v.getCardid());
					}
				}else{
					s[i] = String.valueOf(vo.getCardid());
				}
				if(vo.getLimit().equals("不限时间")){
					a = 0;
				}if(vo.getLimit().equals("仅指定时间")){
					a = 1;
				}if(vo.getLimit().equals("指定时间和日期")){
					a = 2;
				}
				ss[i] = String.valueOf(vo.getCardreaderid());
			}
			Search_TransitTrctic st = (Search_TransitTrctic)dy.get("ser_transitTrctic");
			st.setPassmode(String.valueOf(a));
			st.setCardreaderx(ss);
			st.setStafferx(s);
			st.setCaption(caption);
			request.setAttribute("infoList", list);
		}catch(Exception e){
//			e.printStackTrace();
			log.error("==通行策略设置==",e);
		}
		return  mapping.findForward("info1");
	}
	/**
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return   根据标题得到详细信息
	 */
	public ActionForward show(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PassforbidedBO  bo=new PassforbidedBO();
		try{
			List list=bo.getshow();
			request.setAttribute("infoList", list);
		}catch(Exception e){
			log.error("==通行策略设置==",e);
		}
		return  mapping.findForward("info");
	}
	
	/** 
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			PassforbidedBO  bo=new PassforbidedBO();
		    String cid=request.getParameter("cid"); 
			String[] name=cid.split("\\,");
			try{
				for(int i=0;i<name.length;i++){
					bo.delete(name[i]);	
				}
				ActionMessages messages = new ActionMessages();
				messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("success.delete.viewreader"));
				saveMessages(request, messages);
				
			}catch(Exception e){
				log.error("==通行策略设置==",e);
		    }
		    return   mapping.findForward("delete");
	}
	
	
	
	/**
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return  新增策略
	 */
	public ActionForward load(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		    Global  bal=new Global();
		    DynaActionForm dy=(DynaActionForm) form;
		    try{
		    	
		    	Search_TransitTrctic init=( Search_TransitTrctic)dy.get("ser_transitTrctic");
		    	//  当点新增的时候，把原来选中的全部取消
		    	init.setCardreaderx(new String[0]);
		        init.setLocatorx(new String[0]);
		        init.setStafferx(new String[0]);
		        init.setCaption("");
		        init.setStime("");
		        init.setEtime("");
		        init.setPass("1");
		        init.setPassmode("0");

		    	Calendar cal=Calendar.getInstance();//获取当前时间
				SimpleDateFormat format =new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String time=format.format(cal.getTime());
				

		        List cList=bal.GetCardreader();
		        List slist=bal.GetStaffer1();
//		        List lList=bal.GetLocator();
//		        List slist=bal.GetStaffer();
		        request.setAttribute("Clist", cList);
//		        request.setAttribute("Llist", lList);
		        request.setAttribute("Slist", slist);
		      
		        
		        init.setStime(time);
		        init.setEtime(time);
		        init.setPass("1");
		        init.setPassmode("0");
		    }catch(Exception e){
		    	log.error("==通行策略设置==",e);
		    }
		    return  mapping.findForward("load");
	}
	
	/**
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DynaActionForm dy=(DynaActionForm) form;
		PassforbidedBO bo=new PassforbidedBO();
		try{
			String checkall = request.getParameter("checkall");
			Search_TransitTrctic init=( Search_TransitTrctic)dy.get("ser_transitTrctic");
			List list=bo.getOperationnumber();
			Passforbided pass=(Passforbided)list.get(0);
			String num=pass.getOperationnumber();
//			if(checkall.equals("checkbox")){
			if(checkall != null){
				bo.update1(init,num,checkall);
			}else{
				
				bo.update(init,num,checkall);
			}
			ActionMessages messages = new ActionMessages();
			messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("success.update.cardid"));
			saveMessages(request, messages);
			
		}catch(Exception e){
//			e.printStackTrace();
			log.error("==通行策略设置==",e);
		}
		return  mapping.findForward("delete");
//		     return  mapping.findForward("save");
	}
	/**
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		    DynaActionForm dy=(DynaActionForm) form;
		    PassforbidedBO bo=new PassforbidedBO();
		    try{
		    	String checkall = request.getParameter("checkall");
		    	Search_TransitTrctic init=( Search_TransitTrctic)dy.get("ser_transitTrctic");
		        List list=bo.getOperationnumber();
		        Passforbided pass=(Passforbided)list.get(0);
		        String num=pass.getOperationnumber();
		        if(checkall != null){
		        	bo.save1(init,num);
				}else{
					
					bo.save(init,num);
				}
		        
		        ActionMessages messages = new ActionMessages();
		        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("success.add.vewreader"));
		        saveMessages(request, messages);
		        
		    }catch(Exception e){
		    	log.error("==通行策略设置==",e);
		    }
		     return  mapping.findForward("delete");
//		     return  mapping.findForward("save");
	}

}