/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.kj133.action;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.kj133.entity.CardReaderState;
import com.kj133.entity.bo.TrackBO;
import com.kj133.entity.vo.TrackVO;

/** 
 * MyEclipse Struts
 * Creation date: 08-25-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ShowMaPAction extends Action {
	/*
	 * Generated Methods
	 */
	 private final  Logger log=Logger.getLogger(this.getClass());
	 private   DataInputStream   in;   
     private   DataOutputStream   out;  
     private   int readerCount;//分站总数
     private   Long readerID;//分站ID
     private   Long cardCount;//卡的总数
     private   String ip=null;
     
	@SuppressWarnings("unchecked")
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	        try{ 
	                byte[] send=new byte[24];	 
		            send[0]=22; //单个字节的最高位是127
		            send[1]=(byte)240;//240转换成二进制1111 0000(82，其中8是高位，但是在电脑里面2是高位)
		            send[2]=17;
		            send[3]=60;//之所先先写，17是因为，keyWords是word类型，他读的时候是从后往前面读
		            send[4]=77; //'j' ascii码
		            send[5]=65;
		            send[6]=80;
			            
			        ip="192.168.0.3";  //192.168.0.3 
			        Socket socket = new Socket(ip, 34567);
			        out =new DataOutputStream(socket.getOutputStream());   
			        in=new  DataInputStream(socket.getInputStream());   
			        out.write(send);   
			        out.flush();   
		
			        int c;
			     	TrackBO bo=new TrackBO();
                    List cardreader_List=bo.getCardReader();//分站
                    List cardreaderList=new ArrayList();//分站基本信息
                    byte[] receive =new byte[65536]; //定义一个长度为65536的字节数组，因为不知道要读字节的长度是多少，所以是尽量的写大
			        while( (c  = in.read(receive,0, 65535))>=0)  //从0开始读，读到65535,如果太大的话，那么就会抛出异常 Caused by: java.lang.OutOfMemoryError: Java heap space
			             {     
		                 for(int i=0;i<c;i++)   
		                   { 
		        	  		     readerCount=Integer.parseInt(String.valueOf(receive[4]));//分站数
		        			   
		            			 int sum=13;	 
		            		     for(int k=0;k<readerCount;k++){//分站循环
		            		    	 
		            		    	 String rID=Integer.toHexString(receive[sum+1])+Integer.toHexString(receive[sum]);       		    	    
		            		    	 
		            		    	 readerID=Long.parseLong(rID, 16);//分站ID
		            		    	 
	                                				 
	                                 /*当前分站卡的总数应该是Integer.parseInt(String.valueOf(receive[sum+5]))+
	                                                 Integer.parseInt(String.valueOf(receive[sum+4]))
	                                        现在的做法是把收到的数据转换成int类型10进制，在转换成16进制，然后又转换成10进制
	                                   Integer.toHexString(add256(Integer.parseInt(String.valueOf(receive[sum+5]))))
	                                        怎么收到的分站的2个字节里面有负数？奇怪*/
	                                 
			       	                 String card=Integer.toHexString(add256(Integer.parseInt(String.valueOf(receive[sum+5]))))+Integer.toHexString(add256(Integer.parseInt(String.valueOf(receive[sum+4]))));
			       	                 //System.out.println("card=="+card);     //  031
			       	                 cardCount=Long.parseLong(card, 16); //卡总数  16进制的031转换成10进制是  49
			       	               	
			       	                 //---------------当前分站人数
				       	             TrackVO cardReaderState=(TrackVO) cardreader_List.get(Integer.parseInt(String.valueOf(readerID)));
				       	             //错误原因是cardreader_List.get()最大是256,而有的时候收到的是readerID是11837
				       	             CardReaderState cardreadrstate=new CardReaderState(cardReaderState.getId(),cardReaderState.getShortname(),null,String.valueOf(cardCount));
				       	             cardreaderList.add(cardreadrstate);
				       	             
				       	             
				       	             int count=0;//总人数
				       	             int upCount=0;
				       	            
				       	             for(int cou=0;cou<cardreaderList.size();cou++){
				       	            	CardReaderState cs=(CardReaderState)cardreaderList.get(cou);
				       	            	count=count+Integer.parseInt(cs.getReadercount()); 
				       	            	
				       	             } 
				       	             
				       	            request.setAttribute("count", String.valueOf(count));//统计总人数
				       	              
				       	            if(cardreadrstate.getCardreaderid().equals("1")){
				       	            	request.setAttribute("c1", cardreadrstate.getReadercount().toString());
				       	             }if(cardreadrstate.getCardreaderid().equals("2")){
				       	            	request.setAttribute("c2", cardreadrstate.getReadercount().toString());
				       	             }if(cardreadrstate.getCardreaderid().equals("3")){
				       	            	request.setAttribute("c3", cardreadrstate.getReadercount().toString());
				       	             }if(cardreadrstate.getCardreaderid().equals("4")){
				       	            	request.setAttribute("c4", cardreadrstate.getReadercount().toString());
				       	             }if(cardreadrstate.getCardreaderid().equals("5")){
				       	            	request.setAttribute("c5", cardreadrstate.getReadercount().toString());
				       	             }if(cardreadrstate.getCardreaderid().equals("6")){
				       	            	request.setAttribute("c6", cardreadrstate.getReadercount().toString());
				       	             }if(cardreadrstate.getCardreaderid().equals("7")){
				       	            	request.setAttribute("c7", cardreadrstate.getReadercount().toString());
				       	             }if(cardreadrstate.getCardreaderid().equals("8")){
				       	            	request.setAttribute("c8", cardreadrstate.getReadercount().toString());
				       	             }if(cardreadrstate.getCardreaderid().equals("9")){
				       	            	request.setAttribute("c9", cardreadrstate.getReadercount().toString());
				       	             }if(cardreadrstate.getCardreaderid().equals("10")){
				       	            	request.setAttribute("c10", cardreadrstate.getReadercount().toString());
				       	             }if(cardreadrstate.getCardreaderid().equals("11")){
				       	            	request.setAttribute("c11", cardreadrstate.getReadercount().toString());
				       	             }if(cardreadrstate.getCardreaderid().equals("12")){
				       	            	request.setAttribute("c12", cardreadrstate.getReadercount().toString());
				       	             }if(cardreadrstate.getCardreaderid().equals("13")){
				       	            	request.setAttribute("c13", cardreadrstate.getReadercount().toString());
				       	             }if(cardreadrstate.getCardreaderid().equals("127")){
				       	            	 upCount=Integer.parseInt(cardreadrstate.getReadercount());
				       	            	 request.setAttribute("c14", cardreadrstate.getReadercount().toString());
				       	             }  
				       	             
				       	             request.setAttribute("upCount", upCount);//井上总人数
				       	             int downCount=count-upCount;
				       	             request.setAttribute("downCount", downCount);//井下总人数
			           	             sum=sum+6;
			        	             for(int j=0;j<cardCount;j++){//按卡总数循环
			        	            	       sum=sum+20;
                                           }      
			            		       } 
                                          return mapping.findForward("showmap");	 
			                      }   
		                  } 
                }catch(Exception e){
             	    log.error("--- 采集机连接错误：矿井示意图 --- ", e);
             	    request.setAttribute("ipAddress", ip);
             	    return mapping.findForward("srror");
				 }
		  return null;
	}
	
     // 一个字节的最高位是127,因为有的时候收到的数负数，-128+256就是128
	 public  int add256(int b)throws Exception {
         int a=0; 
		  try{
        	  if(b<0){
 	    		 a=b+256;
 	    	 }else{
 	    		 a=b;
 	    	 }
          }catch(Exception e){
        	  e.printStackTrace();
          }
          return a;
		 }
}